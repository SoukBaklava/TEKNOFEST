from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import threading
import time

app = Flask(__name__)


kullanici_ilaclari = {}


ilac_etkilesimleri = {
    ('Warfarin', 'Aspirin'): {
        'uyari': 'Bu iki ilacÄ±n birlikte kullanÄ±lmasÄ± kanama riskini artÄ±rabilir.',
        'seviyesi': 'yÃ¼ksek',
        'oneriler': 'Doktorunuza danÄ±ÅŸmadan birlikte kullanmayÄ±nÄ±z.'
    },
    ('Lisinopril', 'Ä°buprofen'): {
        'uyari': 'Ä°buprofen, Lisinoprilâ€™in tansiyon dÃ¼ÅŸÃ¼rÃ¼cÃ¼ etkisini azaltabilir ve bÃ¶brek sorunlarÄ±na yol aÃ§abilir.',
        'seviyesi': 'orta',
        'oneriler': 'SÄ±k kullanÄ±mdan kaÃ§Ä±nÄ±n ve doktorunuza danÄ±ÅŸÄ±n.'
    },
    ('Simvastatin', 'Greyfurt Suyu'): {
        'uyari': 'Greyfurt suyu, Simvastatinâ€™in kandaki seviyesini artÄ±rarak yan etki riskini yÃ¼kseltebilir.',
        'seviyesi': 'orta',
        'oneriler': 'Greyfurt tÃ¼ketiminden kaÃ§Ä±nÄ±n.'
    },
    ('Metformin', 'Cimetidin'): {
        'uyari': 'Cimetidin, Metforminâ€™in kandaki seviyesini artÄ±rarak yan etki riskini yÃ¼kseltebilir.',
        'seviyesi': 'dÃ¼ÅŸÃ¼k',
        'oneriler': 'Kan ÅŸekeri seviyenizi takip ediniz.'
    },
    ('Nitrogliserin', 'Sildenafil'): {
        'uyari': 'Bu iki ilaÃ§ bir arada kullanÄ±lÄ±rsa ciddi tansiyon dÃ¼ÅŸÃ¼klÃ¼ÄŸÃ¼ne neden olabilir.',
        'seviyesi': 'yÃ¼ksek',
        'oneriler': 'Kesinlikle birlikte kullanmayÄ±nÄ±z, alternatif tedavi seÃ§enekleri iÃ§in doktorunuza danÄ±ÅŸÄ±nÄ±z.'
    },
    ('ACE Ä°nhibitÃ¶rleri', 'Potasyum Takviyeleri'): {
        'uyari': 'Potasyum seviyesinin tehlikeli derecede yÃ¼kselmesine neden olabilir.',
        'seviyesi': 'orta',
        'oneriler': 'Kan potasyum seviyenizi dÃ¼zenli olarak kontrol ettiriniz.'
    },
    ('Parasetamol', 'Alkol'): {
        'uyari': 'Alkol ile birlikte kullanÄ±mÄ± karaciÄŸer hasarÄ±na yol aÃ§abilir.',
        'seviyesi': 'yÃ¼ksek',
        'oneriler': 'Alkol tÃ¼ketiminden kaÃ§Ä±nÄ±n.'
    },
    ('Aspirin', 'Klopidogrel'): {
        'uyari': 'Bu ilaÃ§lar birlikte kullanÄ±ldÄ±ÄŸÄ±nda kanama riskini artÄ±rabilir.',
        'seviyesi': 'yÃ¼ksek',
        'oneriler': 'YakÄ±n takiple kullanÄ±nÄ±z.'
    },
    ('Metoprolol', 'Verapamil'): {
        'uyari': 'Kalp hÄ±zÄ± ve kan basÄ±ncÄ± aÅŸÄ±rÄ± derecede dÃ¼ÅŸebilir.',
        'seviyesi': 'yÃ¼ksek',
        'oneriler': 'EÅŸ zamanlÄ± kullanÄ±mÄ±nÄ± doktorunuza danÄ±ÅŸÄ±n.'
    },
    ('Digoksin', 'Furosemid'): {
        'uyari': 'DÃ¼ÅŸÃ¼k potasyum seviyelerine baÄŸlÄ± olarak digoksin toksisitesi riski artabilir.',
        'seviyesi': 'orta',
        'oneriler': 'Elektrolit seviyenizi dÃ¼zenli kontrol ettirin.'
    },
    ('Levotiroksin', 'Demir Takviyeleri'): {
        'uyari': 'Demir, Levotiroksin emilimini azaltabilir.',
        'seviyesi': 'dÃ¼ÅŸÃ¼k',
        'oneriler': 'Ä°ki ilaÃ§ arasÄ±na zaman bÄ±rakÄ±n.'
    },
    ('Antibiyotikler', 'DoÄŸum Kontrol HaplarÄ±'): {
        'uyari': 'Antibiyotikler doÄŸum kontrol haplarÄ±nÄ±n etkinliÄŸini azaltabilir.',
        'seviyesi': 'orta',
        'oneriler': 'Ek Ã¶nlemler kullanÄ±nÄ±z.'
    },
    ('Allopurinol', 'Azatioprin'): {
        'uyari': 'Birlikte kullanÄ±m toksisite riskini artÄ±rabilir.',
        'seviyesi': 'yÃ¼ksek',
        'oneriler': 'Doktor kontrolÃ¼ altÄ±nda kullanÄ±nÄ±z.'
    },
    ('Simetidin', 'Teofilin'): {
        'uyari': 'Simetidin, Teofilinâ€™in yan etkilerini artÄ±rabilir.',
        'seviyesi': 'orta',
        'oneriler': 'DÃ¼zenli doz takibi yapÄ±nÄ±z.'
    },
    ('AntikoagÃ¼lanlar', 'NSAIDler'): {
        'uyari': 'Kanama riski Ã¶nemli Ã¶lÃ§Ã¼de artabilir.',
        'seviyesi': 'yÃ¼ksek',
        'oneriler': 'Birlikte kullanÄ±mdan kaÃ§Ä±nÄ±n.'
    },
    ('Diltiazem', 'Beta Blokerler'): {
        'uyari': 'AÅŸÄ±rÄ± kalp hÄ±zÄ± ve kan basÄ±ncÄ± dÃ¼ÅŸÃ¼ÅŸÃ¼ riski.',
        'seviyesi': 'orta',
        'oneriler': 'Doktor kontrolÃ¼nde kullanÄ±n.'
    },
    ('Ä°nsÃ¼lin', 'Tiazid DiÃ¼retikler'): {
        'uyari': 'Kan ÅŸekeri kontrolÃ¼ zorlaÅŸabilir.',
        'seviyesi': 'orta',
        'oneriler': 'Kan ÅŸekeri seviyenizi dÃ¼zenli kontrol edin.'
    },
    ('Fenitoin', 'DoÄŸum Kontrol HaplarÄ±'): {
        'uyari': 'DoÄŸum kontrol haplarÄ±nÄ±n etkinliÄŸi azalabilir.',
        'seviyesi': 'orta',
        'oneriler': 'Alternatif korunma yÃ¶ntemleri kullanÄ±nÄ±z.'
    },
    ('Antasitler', 'Levotiroksin'): {
        'uyari': 'Antasitler Levotiroksin emilimini azaltabilir.',
        'seviyesi': 'dÃ¼ÅŸÃ¼k',
        'oneriler': 'Zaman aralÄ±ÄŸÄ± bÄ±rakÄ±n.'
    },
    ('DiÃ¼retikler', 'Lityum'): {
        'uyari': 'Lityum toksisitesi riski artabilir.',
        'seviyesi': 'yÃ¼ksek',
        'oneriler': 'Serum seviyenizi dÃ¼zenli kontrol ettirin.'
    },
    ('Efedrin', 'Monoamin Oksidaz Ä°nhibitÃ¶rleri'): {
        'uyari': 'Ciddi hipertansiyon riski.',
        'seviyesi': 'yÃ¼ksek',
        'oneriler': 'Kesinlikle birlikte kullanmayÄ±nÄ±z.'
    }
}


def etkilesim_kontrol(ilac1, ilac2):
    """
    Ä°ki ilaÃ§ arasÄ±ndaki etkileÅŸimi kontrol eder.
    """
    anahtar = (ilac1, ilac2)
    if anahtar in ilac_etkilesimleri:
        return ilac_etkilesimleri[anahtar]
    anahtar = (ilac2, ilac1)
    return ilac_etkilesimleri.get(anahtar)

def tum_etkilesimleri_kontrol_et(ilaclar):
    """
    KullanÄ±cÄ±nÄ±n ilaÃ§larÄ± arasÄ±ndaki tÃ¼m olasÄ± etkileÅŸimleri kontrol eder.
    """
    uyarilar = []
    n = len(ilaclar)
    for i in range(n):
        for j in range(i + 1, n):
            ilac1 = ilaclar[i]['ilac']
            ilac2 = ilaclar[j]['ilac']
            etkilesim = etkilesim_kontrol(ilac1, ilac2)
            if etkilesim:
                uyarilar.append({
                    'ilaclar': (ilac1, ilac2),
                    'uyari': etkilesim['uyari'],
                    'seviyesi': etkilesim['seviyesi'],
                    'oneriler': etkilesim['oneriler']
                })
    return uyarilar

def ai_optimize_zaman(kullanici_rutini, ilac_zamani):
    """
    KullanÄ±cÄ±nÄ±n ilaÃ§ alma zamanlarÄ±nÄ± optimize eder.
    (Bu fonksiyon ÅŸu an basit bir versiyon, ileride geliÅŸtirilebilir.)
    """
    return ilac_zamani

def hatirlatma_gonder(kullanici_id, ilac):
    """KullanÄ±cÄ±ya hatÄ±rlatma gÃ¶nderir """
    print(f"ğŸ“¢ KullanÄ±cÄ± {kullanici_id}: {ilac['ilac']} ilacÄ±nÄ±zÄ± almayÄ± unutmayÄ±n! (Doz: {ilac.get('doz', 'Bilinmiyor')})")

def hatirlatma_zamanlayici(kullanici_id):
    """
    KullanÄ±cÄ±nÄ±n ilaÃ§ saatlerini takip eder ve zamanÄ± geldiÄŸinde hatÄ±rlatma yapar.
    """
    def zamanlayici_dongu():
        while True:
            su_an = datetime.now()
            ilaclar = kullanici_ilaclari.get(kullanici_id, [])
            for ilac in ilaclar:
                hatirlatma_saati = ilac['zaman']
                if su_an <= hatirlatma_saati < su_an + timedelta(minutes=1):
                    hatirlatma_gonder(kullanici_id, ilac)
            time.sleep(60)  # 1 dakika sonra tekrar kontrol et

    t = threading.Thread(target=zamanlayici_dongu, daemon=True)
    t.start()

@app.route('/ilac_ekle', methods=['POST'])
def ilac_ekle():
    """
    KullanÄ±cÄ±nÄ±n ilaÃ§larÄ±nÄ± ekleyebileceÄŸi endpoint.
    """
    veri = request.get_json()
    kullanici_id = veri.get('kullanici_id')
    ilac = veri.get('ilac')
    doz = veri.get('doz')
    zaman_str = veri.get('zaman')
    kullanici_rutini = veri.get('kullanici_rutini', {})

    try:
        hatirlatma_saati = datetime.fromisoformat(zaman_str)
    except Exception:
        return jsonify({"hata": "GeÃ§ersiz zaman formatÄ±. ISO formatÄ± kullanÄ±nÄ±z."}), 400

    optimize_edilmis_zaman = ai_optimize_zaman(kullanici_rutini, hatirlatma_saati)

    yeni_ilac = {
        'ilac': ilac,
        'doz': doz,
        'zaman': optimize_edilmis_zaman
    }

    if kullanici_id in kullanici_ilaclari:
        kullanici_ilaclari[kullanici_id].append(yeni_ilac)
    else:
        kullanici_ilaclari[kullanici_id] = [yeni_ilac]
        hatirlatma_zamanlayici(kullanici_id)

    etkilesimler = tum_etkilesimleri_kontrol_et(kullanici_ilaclari[kullanici_id])
    return jsonify({
        "mesaj": "Ä°laÃ§ baÅŸarÄ±yla eklendi.",
        "optimize_edilmis_zaman": optimize_edilmis_zaman.isoformat(),
        "etkilesim_uyarilari": etkilesimler
    })

@app.route('/ilaclar', methods=['GET'])
def ilaclari_getir():
    """
    Belirli bir kullanÄ±cÄ±nÄ±n ilaÃ§larÄ±nÄ± getirir.
    """
    kullanici_id = request.args.get('kullanici_id')
    ilaclar = kullanici_ilaclari.get(kullanici_id, [])
    for ilac in ilaclar:
        ilac['zaman'] = ilac['zaman'].isoformat()
    return jsonify(ilaclar)

@app.route('/etkilesim_kontrol', methods=['POST'])
def etkilesim_kontrolu():
    """
    GÃ¶nderilen ilaÃ§ listesindeki etkileÅŸimleri kontrol eder.
    """
    veri = request.get_json()
    ilaclar = veri.get('ilaclar', [])
    etkilesimler = tum_etkilesimleri_kontrol_et(ilaclar)
    return jsonify(etkilesimler)

@app.route('/')
def index():
    """Sunucunun Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ± kontrol etmek iÃ§in basit bir sayfa."""
    return "ğŸ“¢ Ä°laÃ§ HatÄ±rlatma ve EtkileÅŸim Kontrol UygulamasÄ± Ã‡alÄ±ÅŸÄ±yor!"

if __name__ == '__main__':
    app.run(debug=True)


# Sadece bunu kivye taÅŸÄ±mak kaldÄ±